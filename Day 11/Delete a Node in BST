/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode parent = null;
        TreeNode curr = root;
        while(curr != null && curr.val != key){
            parent = curr;
            if(key < curr.val){
                curr = curr.left;
            }
            else{
                curr = curr.right;
            }
        }
        if(curr == null){
            return root;
        }
        if(curr.left != null && curr.right != null){
            TreeNode temp = swapValue(curr.right);
            deleteNode(root,temp.val);
            curr.val = temp.val;
        }
        else if(curr.left == null && curr.right == null){
            if(curr != root){
                if(parent.right == curr){
                    parent.right = null;
                }
                else{
                    parent.left = null;
                }
            }
            else{
                root = null;
            }
        }
        else {
            if(curr == root){
                root = curr.left == null?curr.right:curr.left;
            }
            else if(curr.val < parent.val){
                if(curr.left != null){
                    parent.left = curr.left;
                }
                else{
                    parent.left = curr.right;
                }
            }
            else{
                if(curr.left != null){
                    parent.right = curr.left;
                }
                else{
                    parent.right = curr.right;
                }
            }
        }
        return root;
    }
    public TreeNode swapValue(TreeNode root){
        while(root.left != null){
            root = root.left;
        }
        return root;
    }
}
