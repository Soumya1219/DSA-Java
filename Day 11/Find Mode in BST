/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int[] findMode(TreeNode root) {
        ArrayList<Integer> lst = new ArrayList<>();
        TreeMap<Integer,Integer> map = new TreeMap<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i < size;i++){
                root = queue.poll();
                map.put(root.val,map.getOrDefault(root.val,0) + 1);
                if(root.left != null){
                    queue.add(root.left);
                }
                if(root.right != null){
                    queue.add(root.right);
                }
            }
        }
        int max = 0;
        for(Integer x : map.values()){
            if(x > max){
                max = x;
            }
        }
        for(Map.Entry<Integer,Integer> m : map.entrySet()) {
            if(m.getValue() == max) {
                lst.add(m.getKey());
            }
        }
        int[] arr = new int[lst.size()];
        for(int i = 0;i < lst.size();i++){
            arr[i] = lst.get(i);
        }
        return arr;
        
    }
}
