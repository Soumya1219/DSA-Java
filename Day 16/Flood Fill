class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int old_color = image[sr][sc];
        int[][] duplicate = image;
        int[] row_offset = {-1,0,0,1};
        int[] col_offset = {0,-1,1,0};
        dfs(image,duplicate,row_offset,col_offset,sr,sc,color,old_color);
        return duplicate;
    }
    public void dfs(int[][] image,int[][] duplicate,int[] row_offset,int[] col_offset,int sr,int sc,int color,int old_color) {
        duplicate[sr][sc] = color;
        int m = image.length;
        int n = image[0].length;
        for(int i = 0;i < 4;i++) {
            int row = sr + row_offset[i];
            int col = sc + col_offset[i];
            if(row >= 0 && row < m && col >= 0 && col < n && image[row][col] == old_color && duplicate[row][col] != color)
            dfs(image,duplicate,row_offset,col_offset,row,col,color,old_color);
        }

    }
}
