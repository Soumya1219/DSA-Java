class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int no_of_islands = 0;
        for(int i = 0;i < m;i++) {
            for(int j = 0;j < n;j++) {
                if(grid[i][j] == '1' && grid[i][j] != '2') {
                    no_of_islands++;
                    dfs(i,j,grid,visited);
                }
            }
        }
        return no_of_islands;
    }
    public void dfs(int x,int y,char[][] grid,boolean[][] visited) {
        Stack<Pair> stack = new Stack<>();
        int[] row_offset = {0,1,0,-1};
        int[] col_offset = {-1,0,1,0};
        stack.push(new Pair(x,y));
        grid[x][y] = '2';
        while(!stack.isEmpty()) {
            Pair pair = stack.pop();
            int row = pair.row;
            int col = pair.col;
            for(int i = 0;i < row_offset.length;i++) {
                int nrow = row_offset[i] + row;
                int ncol = col_offset[i] + col;
                if(nrow >= 0 && nrow < grid.length && ncol >= 0 && ncol < grid[0].length && grid[nrow][ncol] == '1' && grid[nrow][ncol] != '2') {
                    grid[nrow][ncol] = '2';
                    stack.push(new Pair(nrow,ncol));
                }
            }
        }
    }
    public class Pair {
        int row,col;
        public Pair(int row,int col) {
            this.row = row;
            this.col = col;
        }
    }
}
