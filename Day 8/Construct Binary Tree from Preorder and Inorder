/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0;i < inorder.length;i++){
            map.put(inorder[i],i);
        }
        TreeNode root = Tree(preorder,0,preorder.length - 1,inorder,0,inorder.length - 1,map);
        return root;
    }
    public TreeNode Tree(int[] pre,int ps,int pe,int[] in,int is,int ie,Map<Integer,Integer> map){
        if(pe < ps || ie < is){
            return null;
        }
        TreeNode root = new TreeNode(pre[ps]);
        int im = map.get(root.val);
        int count = im - is;
        root.left = Tree(pre,ps + 1,ps + count,in,is,im - 1,map);
        root.right = Tree(pre,ps + count + 1,pe,in,im + 1,ie,map);
        return root;
    }
}
