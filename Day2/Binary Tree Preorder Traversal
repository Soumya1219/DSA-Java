/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 //Recursive Approach
 
class Solution {
    List<Integer> list = new ArrayList<Integer>();
    public List<Integer> preorderTraversal(TreeNode root) {
        preOrder(root);
        return list;
    }
    public void preOrder(TreeNode node){
        if(node == null){
            return;
        }
        list.add(node.val);
        preOrder(node.left);
        preOrder(node.right);
    }
}

//Iterative Approach
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<>();
        if(root == null){
            return list;
        }
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode newnode = stack.peek();
            list.add(newnode.val);
            stack.pop();
            if(newnode.right!= null){
                stack.push(newnode.right);
            }
            if(newnode.left!= null){
                stack.push(newnode.left);
            }
        }
        return list;
    }
}
