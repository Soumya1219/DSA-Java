/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 //Using Queue
 
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> lst = new ArrayList<List<Integer>>();
        if(root == null){
            return lst;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        boolean level = true;
        while(!queue.isEmpty()){
            List<Integer> ans = new ArrayList<>();
            int size = queue.size();
            for(int i = 0;i < size;i++){
                root = queue.peek();
                if(root.left!= null){
                    queue.offer(root.left);
                }
                if(root.right!= null){
                    queue.offer(root.right);
                }
                if(level){
                    ans.add(queue.poll().val);
                }
                else{
                    ans.add(0,queue.poll().val);
                }
            }
            level = !level;
            lst.add(ans);
        }
        return lst;
    }
}

//Using Two Stacks

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> lst = new ArrayList<List<Integer>>();
        if(root == null){
            return lst;
        }
        Stack<TreeNode> stack1 = new Stack<>();
        stack1.push(root);
        boolean level = true;
        while(!stack1.isEmpty()){
            List<Integer> ans = new ArrayList<>();
            Stack<TreeNode> stack2 = new Stack<>();
            int size = stack1.size();
            for(int i = 0;i < size;i++){
                root = stack1.pop();
                ans.add(root.val);
                if(level){
                    if(root.left!= null){
                        stack2.push(root.left);
                    }
                    if(root.right!= null){
                        stack2.push(root.right);
                    }
                }
                else{
                    if(root.right!= null){
                        stack2.push(root.right);
                    }
                    if(root.left!= null){
                        stack2.push(root.left);
                    }
                }
            }
            level = !level;
            lst.add(ans);
            stack1 = stack2;
        }
        return lst;
    }
}

// Using ArrayDeque

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> lst = new ArrayList<List<Integer>>();
        if(root == null){
            return lst;
        }
        ArrayDeque<TreeNode> queue1 = new ArrayDeque<>();
        queue1.add(root);
        boolean level = true;
        while(!queue1.isEmpty()){
            ArrayDeque<TreeNode> queue2 = new ArrayDeque<>();
            List<Integer> ans = new ArrayList<>();
            int size = queue1.size();
            for(int i = 0;i < size;i++){
                root = queue1.peek();
                ans.add(queue1.poll().val);
                if(level){
                    if(root.left != null){
                        queue2.addFirst(root.left);
                    }
                    if(root.right != null){
                        queue2.addFirst(root.right);
                    }
                }
                else{
                    if(root.right != null){
                        queue2.addFirst(root.right);
                    }
                    if(root.left != null){
                        queue2.addFirst(root.left);
                    }
                }
            }
            level = !level;
            lst.add(ans);
            queue1 = queue2;
        }
        return lst;
    }
}
